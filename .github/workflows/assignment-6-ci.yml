name: CI Assignment 6

# 1. workflow는 PR이 올라오거나 혹은 PR에 commit이 push될 때 실행 된다.
on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: job1 구현 -  tsc, build 를 실행한다. 오류가 발생하면 코멘트를 남긴다.
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Run tsc and build
        id: build
        run: npm run build # package.json "build" : "tsc -b && vite build"
        working-directory: packages/assignment-6
        # continue-on-error: true # 명령이 실패하더라도 (예: 빌드 오류 발생) 워크플로우는 계속 진행

      - name: Comment PR on Failure
        if: failure() && steps.build.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: job2 구현 - eslint를 실행한 다음에, eslint에서 오류가 발생할 경우 report를 코멘트에 남긴다.
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Install Node.js dependencies
        run: npm install --legacy-peer-deps
        working-directory: packages/assignment-6

      - name: Run Eslint
        id: lint
        run: npm run lint
        working-directory: packages/assignment-6

      - name: Comment PR on Failure
        if: failure() && steps.lint.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const lintOutput = `${{ steps.lint.outputs.lint_output }}`;
            const formattedOutput = lintOutput.split('\n')
              .filter(line => !line.startsWith('npm error'))
              .join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `\`\`\`\n${formattedOutput}\n\`\`\``
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현 - 테스트를 실행하고, 커버리지를 측정하여 코멘트에 남긴다.
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현 - lighthouse ci 를 실행하고, 실행 결과를 코멘트에 남긴다.
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현 - PR이 open될 때만 실행되고, 팀원 중 한 명을 랜덤으로 선정하여 리뷰어를 지정한 다음에 코멘트에 멘션하여 올린다. 실제로 PR에 리뷰어로 지정도 되어야한다.
        run: echo "job5의 내용을 구현해주세요"
